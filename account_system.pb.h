// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_account_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_account_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_account_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_account_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_account_5fsystem_2eproto;
namespace general {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Bank;
class BankDefaultTypeInternal;
extern BankDefaultTypeInternal _Bank_default_instance_;
}  // namespace general
PROTOBUF_NAMESPACE_OPEN
template<> ::general::Account* Arena::CreateMaybeMessage<::general::Account>(Arena*);
template<> ::general::Bank* Arena::CreateMaybeMessage<::general::Bank>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace general {

enum Account_AccountType : int {
  Account_AccountType_Savings = 0,
  Account_AccountType_Checking = 1,
  Account_AccountType_Loan = 2,
  Account_AccountType_Account_AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Account_AccountType_Account_AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Account_AccountType_IsValid(int value);
constexpr Account_AccountType Account_AccountType_AccountType_MIN = Account_AccountType_Savings;
constexpr Account_AccountType Account_AccountType_AccountType_MAX = Account_AccountType_Loan;
constexpr int Account_AccountType_AccountType_ARRAYSIZE = Account_AccountType_AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Account_AccountType_descriptor();
template<typename T>
inline const std::string& Account_AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Account_AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Account_AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Account_AccountType_descriptor(), enum_t_value);
}
inline bool Account_AccountType_Parse(
    const std::string& name, Account_AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Account_AccountType>(
    Account_AccountType_descriptor(), name, value);
}
// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:general.Account) */ {
 public:
  inline Account() : Account(nullptr) {};
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "general.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_account_5fsystem_2eproto);
    return ::descriptor_table_account_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Account_AccountType AccountType;
  static constexpr AccountType Savings =
    Account_AccountType_Savings;
  static constexpr AccountType Checking =
    Account_AccountType_Checking;
  static constexpr AccountType Loan =
    Account_AccountType_Loan;
  static inline bool AccountType_IsValid(int value) {
    return Account_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN =
    Account_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX =
    Account_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE =
    Account_AccountType_AccountType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccountType_descriptor() {
    return Account_AccountType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccountType_Name.");
    return Account_AccountType_Name(enum_t_value);
  }
  static inline bool AccountType_Parse(const std::string& name,
      AccountType* value) {
    return Account_AccountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kAccountNumberFieldNumber = 3,
    kTypeFieldNumber = 4,
    kBalanceFieldNumber = 5,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_first_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first_name(
      std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_name(
      std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // int32 account_number = 3;
  void clear_account_number();
  ::PROTOBUF_NAMESPACE_ID::int32 account_number() const;
  void set_account_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_account_number() const;
  void _internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .general.Account.AccountType type = 4;
  void clear_type();
  ::general::Account_AccountType type() const;
  void set_type(::general::Account_AccountType value);
  private:
  ::general::Account_AccountType _internal_type() const;
  void _internal_set_type(::general::Account_AccountType value);
  public:

  // float balance = 5;
  void clear_balance();
  float balance() const;
  void set_balance(float value);
  private:
  float _internal_balance() const;
  void _internal_set_balance(float value);
  public:

  // @@protoc_insertion_point(class_scope:general.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 account_number_;
  int type_;
  float balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_account_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Bank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:general.Bank) */ {
 public:
  inline Bank() : Bank(nullptr) {};
  virtual ~Bank();

  Bank(const Bank& from);
  Bank(Bank&& from) noexcept
    : Bank() {
    *this = ::std::move(from);
  }

  inline Bank& operator=(const Bank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bank& operator=(Bank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bank* internal_default_instance() {
    return reinterpret_cast<const Bank*>(
               &_Bank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bank& a, Bank& b) {
    a.Swap(&b);
  }
  inline void Swap(Bank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bank* New() const final {
    return CreateMaybeMessage<Bank>(nullptr);
  }

  Bank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bank& from);
  void MergeFrom(const Bank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "general.Bank";
  }
  protected:
  explicit Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_account_5fsystem_2eproto);
    return ::descriptor_table_account_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
    kTotalAccountsFieldNumber = 2,
  };
  // repeated .general.Account accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::general::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::general::Account >*
      mutable_accounts();
  private:
  const ::general::Account& _internal_accounts(int index) const;
  ::general::Account* _internal_add_accounts();
  public:
  const ::general::Account& accounts(int index) const;
  ::general::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::general::Account >&
      accounts() const;

  // int32 totalAccounts = 2;
  void clear_totalaccounts();
  ::PROTOBUF_NAMESPACE_ID::int32 totalaccounts() const;
  void set_totalaccounts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalaccounts() const;
  void _internal_set_totalaccounts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:general.Bank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::general::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalaccounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_account_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string first_name = 1;
inline void Account::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::first_name() const {
  // @@protoc_insertion_point(field_get:general.Account.first_name)
  return _internal_first_name();
}
inline void Account::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:general.Account.first_name)
}
inline std::string* Account::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:general.Account.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& Account::_internal_first_name() const {
  return first_name_.Get();
}
inline void Account::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:general.Account.first_name)
}
inline void Account::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:general.Account.first_name)
}
inline void Account::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:general.Account.first_name)
}
inline std::string* Account::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_first_name() {
  // @@protoc_insertion_point(field_release:general.Account.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:general.Account.first_name)
}
inline std::string* Account::unsafe_arena_release_first_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:general.Account.first_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return first_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Account::unsafe_arena_set_allocated_first_name(
    std::string* first_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      first_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:general.Account.first_name)
}

// string last_name = 2;
inline void Account::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::last_name() const {
  // @@protoc_insertion_point(field_get:general.Account.last_name)
  return _internal_last_name();
}
inline void Account::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:general.Account.last_name)
}
inline std::string* Account::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:general.Account.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& Account::_internal_last_name() const {
  return last_name_.Get();
}
inline void Account::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_last_name(std::string&& value) {
  
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:general.Account.last_name)
}
inline void Account::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:general.Account.last_name)
}
inline void Account::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:general.Account.last_name)
}
inline std::string* Account::_internal_mutable_last_name() {
  
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_last_name() {
  // @@protoc_insertion_point(field_release:general.Account.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:general.Account.last_name)
}
inline std::string* Account::unsafe_arena_release_last_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:general.Account.last_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Account::unsafe_arena_set_allocated_last_name(
    std::string* last_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:general.Account.last_name)
}

// int32 account_number = 3;
inline void Account::clear_account_number() {
  account_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::_internal_account_number() const {
  return account_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::account_number() const {
  // @@protoc_insertion_point(field_get:general.Account.account_number)
  return _internal_account_number();
}
inline void Account::_internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  account_number_ = value;
}
inline void Account::set_account_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:general.Account.account_number)
}

// .general.Account.AccountType type = 4;
inline void Account::clear_type() {
  type_ = 0;
}
inline ::general::Account_AccountType Account::_internal_type() const {
  return static_cast< ::general::Account_AccountType >(type_);
}
inline ::general::Account_AccountType Account::type() const {
  // @@protoc_insertion_point(field_get:general.Account.type)
  return _internal_type();
}
inline void Account::_internal_set_type(::general::Account_AccountType value) {
  
  type_ = value;
}
inline void Account::set_type(::general::Account_AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:general.Account.type)
}

// float balance = 5;
inline void Account::clear_balance() {
  balance_ = 0;
}
inline float Account::_internal_balance() const {
  return balance_;
}
inline float Account::balance() const {
  // @@protoc_insertion_point(field_get:general.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(float value) {
  
  balance_ = value;
}
inline void Account::set_balance(float value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:general.Account.balance)
}

// -------------------------------------------------------------------

// Bank

// repeated .general.Account accounts = 1;
inline int Bank::_internal_accounts_size() const {
  return accounts_.size();
}
inline int Bank::accounts_size() const {
  return _internal_accounts_size();
}
inline void Bank::clear_accounts() {
  accounts_.Clear();
}
inline ::general::Account* Bank::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:general.Bank.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::general::Account >*
Bank::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:general.Bank.accounts)
  return &accounts_;
}
inline const ::general::Account& Bank::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::general::Account& Bank::accounts(int index) const {
  // @@protoc_insertion_point(field_get:general.Bank.accounts)
  return _internal_accounts(index);
}
inline ::general::Account* Bank::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::general::Account* Bank::add_accounts() {
  // @@protoc_insertion_point(field_add:general.Bank.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::general::Account >&
Bank::accounts() const {
  // @@protoc_insertion_point(field_list:general.Bank.accounts)
  return accounts_;
}

// int32 totalAccounts = 2;
inline void Bank::clear_totalaccounts() {
  totalaccounts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bank::_internal_totalaccounts() const {
  return totalaccounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bank::totalaccounts() const {
  // @@protoc_insertion_point(field_get:general.Bank.totalAccounts)
  return _internal_totalaccounts();
}
inline void Bank::_internal_set_totalaccounts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalaccounts_ = value;
}
inline void Bank::set_totalaccounts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalaccounts(value);
  // @@protoc_insertion_point(field_set:general.Bank.totalAccounts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace general

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::general::Account_AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::general::Account_AccountType>() {
  return ::general::Account_AccountType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_account_5fsystem_2eproto
